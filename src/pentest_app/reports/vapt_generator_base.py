"""
VAPT Report Generator Base Class
===============================

This module provides the base class for generating professional VAPT (Vulnerability Assessment 
and Penetration Testing) reports in PDF format using ReportLab.

Author: Cybersecurity Team
Date: September 2025
"""

from datetime import datetime, timezone
from typing import Dict, List, Any, Optional, Union
import os
import uuid
from pathlib import Path

# PDF generation imports
from reportlab.lib.pagesizes import A4, letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.colors import Color, black, white, red, orange, yellow, green, blue
from reportlab.lib.units import inch, cm
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, 
    PageBreak, Image, KeepTogether, Flowable
)
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT, TA_JUSTIFY
from reportlab.platypus.tableofcontents import TableOfContents
from reportlab.lib import colors

# Data visualization
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # Use non-interactive backend


class VAPTReportGenerator:
    """
    Base class for generating professional VAPT reports in PDF format.
    
    This class provides the foundation for creating comprehensive vulnerability
    assessment and penetration testing reports following Cybrty's template format.
    """
    
    def __init__(self, run_id: str, target: str, output_dir: str = "reports"):
        """
        Initialize the VAPT report generator.
        
        Args:
            run_id: Unique identifier for the penetration test run
            target: Target URL/system being tested
            output_dir: Directory to save the generated reports
        """
        self.run_id = run_id
        self.target = target
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        
        # Report metadata
        self.report_date = datetime.now(timezone.utc)
        self.report_version = "1.0"
        self.prepared_by = "Cybrty Security Team"
        self.approved_by = "Chief Security Officer"
        
        # Document setup
        self.page_width, self.page_height = A4
        self.margin = 1 * inch
        
        # Initialize styles
        self._setup_styles()
        
        # Data containers
        self.findings: List[Dict[str, Any]] = []
        self.summary_stats: Dict[str, int] = {
            "critical": 0,
            "high": 0, 
            "medium": 0,
            "low": 0,
            "info": 0
        }
        
        # Colors for severity levels
        self.severity_colors = {
            "critical": colors.red,
            "high": colors.orange, 
            "medium": colors.yellow,
            "low": colors.lightblue,
            "info": colors.lightgrey
        }
    
    def _setup_styles(self):
        """Set up paragraph and text styles for the report."""
        self.styles = getSampleStyleSheet()
        
        # Custom styles for Cybrty branding - only add if they don't exist
        if 'CybrtyTitle' not in self.styles:
            self.styles.add(ParagraphStyle(
                name='CybrtyTitle',
                parent=self.styles['Title'],
                fontSize=24,
                spaceAfter=30,
                textColor=colors.darkblue,
                alignment=TA_CENTER,
                fontName='Helvetica-Bold'
            ))
        
        if 'CybrtySubtitle' not in self.styles:
            self.styles.add(ParagraphStyle(
                name='CybrtySubtitle',
                parent=self.styles['Heading1'],
                fontSize=16,
                spaceAfter=20,
                textColor=colors.darkblue,
                alignment=TA_CENTER,
                fontName='Helvetica'
            ))
        
        if 'SectionHeader' not in self.styles:
            self.styles.add(ParagraphStyle(
                name='SectionHeader',
                parent=self.styles['Heading1'],
                fontSize=14,
                spaceBefore=20,
                spaceAfter=10,
                textColor=colors.darkblue,
                fontName='Helvetica-Bold'
            ))
        
        if 'SubsectionHeader' not in self.styles:
            self.styles.add(ParagraphStyle(
                name='SubsectionHeader',
                parent=self.styles['Heading2'],
                fontSize=12,
                spaceBefore=15,
                spaceAfter=8,
                textColor=colors.darkblue,
                fontName='Helvetica-Bold'
            ))
        
        if 'BodyText' not in self.styles:
            self.styles.add(ParagraphStyle(
                name='BodyText',
                parent=self.styles['Normal'],
                fontSize=10,
                spaceAfter=6,
                alignment=TA_JUSTIFY,
                fontName='Helvetica'
            ))
        
        if 'CriticalText' not in self.styles:
            self.styles.add(ParagraphStyle(
                name='CriticalText',
                parent=self.styles['Normal'],
                fontSize=10,
                textColor=colors.red,
                fontName='Helvetica-Bold'
            ))
        
        if 'HighText' not in self.styles:
            self.styles.add(ParagraphStyle(
                name='HighText',
                parent=self.styles['Normal'],
                fontSize=10,
                textColor=colors.orange,
                fontName='Helvetica-Bold'
            ))
        
        if 'MediumText' not in self.styles:
            self.styles.add(ParagraphStyle(
                name='MediumText',
                parent=self.styles['Normal'],
                fontSize=10,
                textColor=colors.goldenrod,
                fontName='Helvetica-Bold'
            ))
        
        if 'LowText' not in self.styles:
            self.styles.add(ParagraphStyle(
                name='LowText',
                parent=self.styles['Normal'],
                fontSize=10,
                textColor=colors.blue,
                fontName='Helvetica'
            ))
    
    def add_finding(self, finding: Dict[str, Any]):
        """
        Add a security finding to the report.
        
        Args:
            finding: Dictionary containing vulnerability details
        """
        # Ensure required fields
        required_fields = ['severity', 'title', 'description', 'recommendation']
        for field in required_fields:
            if field not in finding:
                finding[field] = "Not specified"
        
        # Generate vulnerability ID
        severity = finding['severity'].lower()
        vuln_count = len([f for f in self.findings if f['severity'].lower() == severity]) + 1
        finding['vuln_id'] = f"CYB-{severity.upper()[:4]}-{vuln_count:03d}"
        
        self.findings.append(finding)
        
        # Update summary statistics
        if severity in self.summary_stats:
            self.summary_stats[severity] += 1
    
    def add_findings_from_opensearch(self, opensearch_results: List[Dict[str, Any]]):
        """
        Add findings from OpenSearch results.
        
        Args:
            opensearch_results: List of findings from OpenSearch
        """
        for result in opensearch_results:
            finding = {
                'severity': result.get('severity', 'info'),
                'title': result.get('finding', 'Security Finding'),
                'description': result.get('description', result.get('finding', 'No description available')),
                'recommendation': result.get('recommendation', 'Review and remediate as appropriate'),
                'tool': result.get('tool', 'Unknown'),
                'timestamp': result.get('timestamp', datetime.now(timezone.utc)),
                'cvss': result.get('cvss', 'N/A'),
                'affected_system': result.get('target', self.target)
            }
            self.add_finding(finding)
    
    def create_severity_chart(self) -> Optional[str]:
        """
        Create a pie chart showing the distribution of findings by severity.
        
        Returns:
            Path to the generated chart image or None if no data
        """
        # Filter out zero values
        chart_data = {k: v for k, v in self.summary_stats.items() if v > 0}
        
        if not chart_data:
            return None
            
        # Create pie chart
        plt.figure(figsize=(8, 6))
        
        # Create colors list for matplotlib
        severity_colors_mpl = {
            'critical': '#FF0000',  # Red
            'high': '#FF8C00',      # Orange
            'medium': '#FFD700',    # Gold
            'low': '#87CEEB',       # Light blue
            'info': '#D3D3D3'       # Light grey
        }
        
        mpl_colors = [severity_colors_mpl.get(severity, '#808080') for severity in chart_data.keys()]
        
        plt.pie(list(chart_data.values()), labels=list(chart_data.keys()), autopct='%1.1f%%', 
                colors=mpl_colors, startangle=90)
        plt.title('Vulnerability Distribution by Severity')
        
        chart_path = self.output_dir / f"severity_chart_{self.run_id}.png"
        plt.savefig(chart_path, dpi=300, bbox_inches='tight')
        plt.close()
        
        return str(chart_path)
    
    def get_filename(self) -> str:
        """Generate a filename for the report."""
        target_clean = self.target.replace('https://', '').replace('http://', '').replace('/', '_')
        timestamp = self.report_date.strftime('%Y%m%d_%H%M%S')
        return f"VAPT_Report_{target_clean}_{timestamp}_{self.run_id[:8]}.pdf"
    
    def get_output_path(self) -> Path:
        """Get the full output path for the report."""
        return self.output_dir / self.get_filename()
    
    def create_table_style(self, header_color: Color = colors.darkblue, alt_row_color: Color = colors.lightgrey) -> TableStyle:
        """Create a standard table style for the report."""
        return TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), header_color),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, alt_row_color])
        ])
    
    def generate_report(self) -> str:
        """
        Generate the complete VAPT report.
        
        Returns:
            Path to the generated PDF report
        """
        output_path = self.get_output_path()
        
        # Create PDF document
        doc = SimpleDocTemplate(
            str(output_path),
            pagesize=A4,
            rightMargin=self.margin,
            leftMargin=self.margin,
            topMargin=self.margin,
            bottomMargin=self.margin
        )
        
        # Build the story (content)
        story = []
        story.extend(self._create_cover_page())
        story.append(PageBreak())
        story.extend(self._create_document_control())
        story.append(PageBreak())
        story.extend(self._create_executive_summary())
        story.append(PageBreak())
        story.extend(self._create_summary_of_findings())
        story.append(PageBreak())
        story.extend(self._create_detailed_findings())
        story.append(PageBreak())
        story.extend(self._create_recommendations())
        story.append(PageBreak())
        story.extend(self._create_conclusion())
        story.append(PageBreak())
        story.extend(self._create_appendices())
        story.append(PageBreak())
        story.extend(self._create_confidentiality_disclaimer())
        
        # Build the PDF
        doc.build(story)
        
        return str(output_path)
    
    def _create_cover_page(self) -> List[Any]:
        """Create the cover page of the report."""
        story = []
        
        # Company logo placeholder
        story.append(Spacer(1, 50))
        
        # Title
        story.append(Paragraph("VULNERABILITY ASSESSMENT AND<br/>PENETRATION TESTING REPORT", 
                              self.styles['CybrtyTitle']))
        story.append(Spacer(1, 30))
        
        # Target information
        story.append(Paragraph(f"Target: {self.target}", self.styles['CybrtySubtitle']))
        story.append(Spacer(1, 20))
        
        # Report details
        story.append(Paragraph(f"Report Date: {self.report_date.strftime('%B %d, %Y')}", 
                              self.styles['CybrtySubtitle']))
        story.append(Paragraph(f"Assessment Period: {self.report_date.strftime('%B %Y')}", 
                              self.styles['CybrtySubtitle']))
        story.append(Spacer(1, 40))
        
        # Company information
        story.append(Paragraph("Prepared by:", self.styles['SectionHeader']))
        story.append(Paragraph("Cybrty Security Services", self.styles['BodyText']))
        story.append(Paragraph("Cybersecurity Excellence Division", self.styles['BodyText']))
        story.append(Spacer(1, 20))
        
        # Contact information
        story.append(Paragraph("Contact Information:", self.styles['SubsectionHeader']))
        story.append(Paragraph("Email: security@cybrty.com", self.styles['BodyText']))
        story.append(Paragraph("Phone: +1 (555) 123-4567", self.styles['BodyText']))
        story.append(Paragraph("Web: https://cybrty.com", self.styles['BodyText']))
        
        return story
    
    def _create_document_control(self) -> List[Any]:
        """Create the document control section."""
        story = []
        
        story.append(Paragraph("DOCUMENT CONTROL", self.styles['SectionHeader']))
        
        # Document control table
        doc_data = [
            ['Document Title', 'VAPT Report - ' + self.target],
            ['Version', self.report_version],
            ['Date', self.report_date.strftime('%B %d, %Y')],
            ['Prepared by', self.prepared_by],
            ['Reviewed by', 'Senior Security Analyst'],
            ['Approved by', self.approved_by],
            ['Classification', 'CONFIDENTIAL'],
            ['Distribution', 'Client Management Team']
        ]
        
        doc_table = Table(doc_data, colWidths=[2*inch, 4*inch])
        doc_table.setStyle(self.create_table_style())
        story.append(doc_table)
        
        return story
    
    def _create_executive_summary(self) -> List[Any]:
        """Create the executive summary section."""
        story = []
        
        story.append(Paragraph("EXECUTIVE SUMMARY", self.styles['SectionHeader']))
        
        total_findings = sum(self.summary_stats.values())
        critical_high = self.summary_stats['critical'] + self.summary_stats['high']
        
        summary_text = f"""
        Cybrty Security Services conducted a comprehensive Vulnerability Assessment and Penetration 
        Testing (VAPT) engagement against {self.target} during {self.report_date.strftime('%B %Y')}. 
        
        This assessment identified a total of {total_findings} security findings across various 
        severity levels. Of particular concern are {critical_high} high-risk vulnerabilities that 
        require immediate attention.
        
        The assessment methodology included automated vulnerability scanning, manual penetration 
        testing, and security configuration reviews. Our findings indicate varying levels of 
        security posture that require remediation to reduce overall risk exposure.
        
        This report provides detailed technical findings, business impact assessments, and 
        actionable remediation recommendations to strengthen the security posture of the 
        assessed systems.
        """
        
        story.append(Paragraph(summary_text, self.styles['BodyText']))
        
        return story
    
    def _create_summary_of_findings(self) -> List[Any]:
        """Create the summary of findings section."""
        story = []
        
        story.append(Paragraph("SUMMARY OF FINDINGS", self.styles['SectionHeader']))
        
        # Create severity chart
        chart_path = self.create_severity_chart()
        if chart_path and os.path.exists(chart_path):
            story.append(Paragraph("Vulnerability Distribution by Severity", 
                                 self.styles['SubsectionHeader']))
            story.append(Image(chart_path, width=4*inch, height=3*inch))
            story.append(Spacer(1, 20))
        
        # Summary table
        summary_data = [
            ['Severity Level', 'Count', 'Percentage'],
            ['Critical', str(self.summary_stats['critical']), 
             f"{(self.summary_stats['critical']/max(sum(self.summary_stats.values()), 1)*100):.1f}%"],
            ['High', str(self.summary_stats['high']), 
             f"{(self.summary_stats['high']/max(sum(self.summary_stats.values()), 1)*100):.1f}%"],
            ['Medium', str(self.summary_stats['medium']), 
             f"{(self.summary_stats['medium']/max(sum(self.summary_stats.values()), 1)*100):.1f}%"],
            ['Low', str(self.summary_stats['low']), 
             f"{(self.summary_stats['low']/max(sum(self.summary_stats.values()), 1)*100):.1f}%"],
            ['Info', str(self.summary_stats['info']), 
             f"{(self.summary_stats['info']/max(sum(self.summary_stats.values()), 1)*100):.1f}%"]
        ]
        
        summary_table = Table(summary_data, colWidths=[2*inch, 1*inch, 1.5*inch])
        summary_table.setStyle(self.create_table_style())
        story.append(summary_table)
        
        return story
    
    def _create_detailed_findings(self) -> List[Any]:
        """Create the detailed findings section."""
        story = []
        
        story.append(Paragraph("DETAILED FINDINGS", self.styles['SectionHeader']))
        
        if not self.findings:
            story.append(Paragraph("No security findings were identified during this assessment.", 
                                 self.styles['BodyText']))
            return story
        
        # Sort findings by severity
        severity_order = ['critical', 'high', 'medium', 'low', 'info']
        sorted_findings = sorted(self.findings, 
                               key=lambda x: severity_order.index(x['severity'].lower()))
        
        for i, finding in enumerate(sorted_findings):
            story.append(self._create_finding_detail(finding, i + 1))
            if i < len(sorted_findings) - 1:
                story.append(Spacer(1, 20))
        
        return story
    
    def _create_finding_detail(self, finding: Dict[str, Any], finding_num: int) -> KeepTogether:
        """Create a detailed finding entry."""
        content = []
        
        # Finding header
        severity = finding['severity'].upper()
        content.append(Paragraph(f"Finding {finding_num}: {finding['title']}", 
                                self.styles['SubsectionHeader']))
        
        # Finding details table
        detail_data = [
            ['Vulnerability ID', finding.get('vuln_id', 'N/A')],
            ['Severity', severity],
            ['CVSS Score', str(finding.get('cvss', 'N/A'))],
            ['Affected System', finding.get('affected_system', self.target)],
            ['Discovery Tool', finding.get('tool', 'Manual Review')]
        ]
        
        detail_table = Table(detail_data, colWidths=[2*inch, 4*inch])
        detail_table.setStyle(self.create_table_style())
        content.append(detail_table)
        content.append(Spacer(1, 10))
        
        # Description
        content.append(Paragraph("Description:", self.styles['SubsectionHeader']))
        content.append(Paragraph(finding['description'], self.styles['BodyText']))
        content.append(Spacer(1, 8))
        
        # Impact
        impact = finding.get('impact', f"This {severity.lower()} severity vulnerability may impact system security.")
        content.append(Paragraph("Impact:", self.styles['SubsectionHeader']))
        content.append(Paragraph(impact, self.styles['BodyText']))
        content.append(Spacer(1, 8))
        
        # Recommendation
        content.append(Paragraph("Recommendation:", self.styles['SubsectionHeader']))
        content.append(Paragraph(finding['recommendation'], self.styles['BodyText']))
        
        return KeepTogether(content)
    
    def _create_recommendations(self) -> List[Any]:
        """Create the recommendations section."""
        story = []
        
        story.append(Paragraph("RECOMMENDATIONS & REMEDIATION", self.styles['SectionHeader']))
        
        recommendations = """
        Based on the security assessment findings, we recommend implementing the following 
        remediation measures in order of priority:
        
        <b>Immediate Actions (Critical/High Risk):</b>
        • Address all critical and high-severity vulnerabilities within 24-48 hours
        • Implement emergency security patches for identified vulnerabilities
        • Review and strengthen access controls
        
        <b>Short-term Actions (1-4 weeks):</b>
        • Remediate medium-severity vulnerabilities
        • Implement additional security monitoring
        • Update security policies and procedures
        
        <b>Long-term Actions (1-3 months):</b>
        • Address low-severity and informational findings
        • Implement security awareness training
        • Establish regular security assessment schedule
        
        <b>Ongoing Security Practices:</b>
        • Regular vulnerability scanning
        • Security patch management
        • Incident response planning
        • Continuous security monitoring
        """
        
        story.append(Paragraph(recommendations, self.styles['BodyText']))
        
        return story
    
    def _create_conclusion(self) -> List[Any]:
        """Create the conclusion section."""
        story = []
        
        story.append(Paragraph("CONCLUSION & NEXT STEPS", self.styles['SectionHeader']))
        
        total_findings = sum(self.summary_stats.values())
        conclusion_text = f"""
        This VAPT assessment of {self.target} has identified {total_findings} security findings 
        that require attention. The assessment provides a comprehensive view of the current 
        security posture and offers actionable recommendations for improvement.
        
        <b>Key Takeaways:</b>
        • Total findings identified: {total_findings}
        • Critical/High priority items: {self.summary_stats['critical'] + self.summary_stats['high']}
        • Assessment date: {self.report_date.strftime('%B %d, %Y')}
        
        <b>Next Steps:</b>
        1. Review and prioritize remediation activities based on risk severity
        2. Develop an implementation timeline for recommended security controls
        3. Schedule follow-up assessment to validate remediation efforts
        4. Establish ongoing security monitoring and assessment procedures
        
        Cybrty Security Services recommends addressing critical and high-severity findings 
        immediately, followed by systematic remediation of medium and low-severity issues.
        
        We appreciate the opportunity to conduct this security assessment and remain available 
        to assist with remediation planning and implementation.
        """
        
        story.append(Paragraph(conclusion_text, self.styles['BodyText']))
        
        return story
    
    def _create_appendices(self) -> List[Any]:
        """Create the appendices section."""
        story = []
        
        story.append(Paragraph("APPENDICES", self.styles['SectionHeader']))
        
        # Appendix A: Tools Used
        story.append(Paragraph("Appendix A: Security Testing Tools", self.styles['SubsectionHeader']))
        
        tools_used = set()
        for finding in self.findings:
            if finding.get('tool'):
                tools_used.add(finding['tool'])
        
        if not tools_used:
            tools_used = {'Nmap', 'Nikto', 'OWASP ZAP', 'SQLMap', 'Burp Suite', 'Manual Review'}
        
        tools_text = "The following security testing tools were utilized during this assessment:\n\n"
        for tool in sorted(tools_used):
            tools_text += f"• {tool}\n"
        
        story.append(Paragraph(tools_text, self.styles['BodyText']))
        
        # Appendix B: Methodology
        story.append(Paragraph("Appendix B: Testing Methodology", self.styles['SubsectionHeader']))
        
        methodology_text = """
        The security assessment followed a structured methodology including:
        
        <b>1. Reconnaissance and Information Gathering</b>
        • Network discovery and port scanning
        • Service enumeration and fingerprinting
        • Web application discovery
        
        <b>2. Vulnerability Assessment</b>
        • Automated vulnerability scanning
        • Manual security testing
        • Configuration review
        
        <b>3. Penetration Testing</b>
        • Exploitation of identified vulnerabilities
        • Privilege escalation testing
        • Lateral movement assessment
        
        <b>4. Analysis and Reporting</b>
        • Risk assessment and prioritization
        • Documentation of findings
        • Remediation recommendations
        """
        
        story.append(Paragraph(methodology_text, self.styles['BodyText']))
        
        return story
    
    def _create_confidentiality_disclaimer(self) -> List[Any]:
        """Create the confidentiality disclaimer."""
        story = []
        
        story.append(Paragraph("CONFIDENTIALITY DISCLAIMER", self.styles['SectionHeader']))
        
        disclaimer_text = """
        <b>CONFIDENTIAL AND PROPRIETARY</b>
        
        This document contains confidential and proprietary information of Cybrty Security Services 
        and is intended solely for the use of the client organization. This report contains sensitive 
        security information that could be used to compromise systems if disclosed to unauthorized parties.
        
        <b>Distribution and Handling:</b>
        • This report is classified as CONFIDENTIAL
        • Distribution is restricted to authorized personnel only
        • This document should be stored securely and protected from unauthorized access
        • Electronic copies should be encrypted and password protected
        • Physical copies should be stored in locked containers
        
        <b>Legal Notice:</b>
        The information contained in this report is protected by applicable laws and regulations. 
        Unauthorized disclosure, copying, or distribution is strictly prohibited and may result in 
        legal action.
        
        <b>Disclaimer:</b>
        This assessment was conducted based on the systems and configurations present at the time 
        of testing. Security postures can change rapidly, and this report represents a point-in-time 
        assessment. Cybrty Security Services makes no warranties regarding the completeness or 
        accuracy of this assessment beyond the scope and timeframe of the engagement.
        
        For questions regarding this report or its contents, please contact:
        Cybrty Security Services
        Email: security@cybrty.com
        Phone: +1 (555) 123-4567
        
        Report ID: {run_id}
        Generated: {report_date}
        """
        
        disclaimer_text = disclaimer_text.format(
            run_id=self.run_id,
            report_date=self.report_date.strftime('%B %d, %Y at %I:%M %p UTC')
        )
        
        story.append(Paragraph(disclaimer_text, self.styles['BodyText']))
        
        return story
