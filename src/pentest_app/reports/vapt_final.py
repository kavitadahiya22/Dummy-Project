"""
VAPT Final Report Generator
==========================

This module provides the final report generator that combines all VAPT report sections
and produces a complete professional PDF report.

Author: Cybersecurity Team
Date: September 2025
"""

from datetime import datetime, timezone
from typing import Dict, List, Any, Optional
from pathlib import Path
import logging

from .vapt_generator_base import VAPTReportGenerator


logger = logging.getLogger(__name__)


class VAPTFinalReport(VAPTReportGenerator):
    """
    Final VAPT report generator that creates a complete professional PDF report.
    
    This class extends the base generator to provide executive summary generation,
    risk assessment calculations, and comprehensive report compilation.
    """
    
    def __init__(self, run_id: str, target: str, output_dir: str = "reports"):
        """
        Initialize the final VAPT report generator.
        
        Args:
            run_id: Unique identifier for the penetration test run
            target: Target URL/system being tested
            output_dir: Directory to save the generated reports
        """
        super().__init__(run_id, target, output_dir)
        
        # Additional metadata for final report
        self.engagement_type = "Vulnerability Assessment and Penetration Testing"
        self.assessment_scope = f"Web Application Security Assessment of {target}"
        self.methodology = "OWASP Testing Guide v4.0 and NIST SP 800-115"
        
        # Risk metrics
        self.overall_risk_score = 0.0
        self.risk_rating = "Unknown"
        
        logger.info(f"Initialized VAPTFinalReport for {target} with run_id {run_id}")
    
    def calculate_overall_risk(self) -> float:
        """
        Calculate overall risk score based on findings severity distribution.
        
        Returns:
            Overall risk score (0.0 - 10.0 scale)
        """
        if not self.findings:
            self.risk_rating = "Low"
            return 0.0
        
        # Weighted scoring based on severity
        severity_weights = {
            'critical': 10.0,
            'high': 7.5,
            'medium': 5.0,
            'low': 2.5,
            'info': 1.0
        }
        
        total_weighted_score = 0.0
        total_findings = 0
        
        for severity, count in self.summary_stats.items():
            if count > 0:
                weight = severity_weights.get(severity, 1.0)
                total_weighted_score += weight * count
                total_findings += count
        
        if total_findings == 0:
            self.overall_risk_score = 0.0
            self.risk_rating = "Low"
        else:
            self.overall_risk_score = min(total_weighted_score / total_findings, 10.0)
            
            # Determine risk rating
            if self.overall_risk_score >= 8.0:
                self.risk_rating = "Critical"
            elif self.overall_risk_score >= 6.0:
                self.risk_rating = "High"
            elif self.overall_risk_score >= 4.0:
                self.risk_rating = "Medium"
            elif self.overall_risk_score >= 2.0:
                self.risk_rating = "Low"
            else:
                self.risk_rating = "Minimal"
        
        logger.info(f"Calculated overall risk score: {self.overall_risk_score:.2f} ({self.risk_rating})")
        return self.overall_risk_score
    
    def generate_executive_summary_ai(self) -> str:
        """
        Generate an AI-enhanced executive summary based on findings.
        
        Returns:
            Executive summary text with AI insights
        """
        total_findings = sum(self.summary_stats.values())
        critical_high_count = self.summary_stats['critical'] + self.summary_stats['high']
        
        # Calculate risk metrics
        self.calculate_overall_risk()
        
        # Generate executive summary
        if total_findings == 0:
            summary = f"""
            Cybrty Security Services conducted a comprehensive Vulnerability Assessment and 
            Penetration Testing (VAPT) engagement against {self.target} during 
            {self.report_date.strftime('%B %Y')}.
            
            <b>Key Findings:</b>
            • No significant security vulnerabilities were identified during this assessment
            • The target system demonstrates a strong security posture
            • All security controls appear to be functioning as intended
            
            <b>Overall Risk Rating: {self.risk_rating}</b>
            • Risk Score: {self.overall_risk_score:.1f}/10.0
            • Assessment completed with no critical findings
            
            <b>Recommendations:</b>
            • Continue regular security monitoring and maintenance
            • Implement periodic security assessments
            • Maintain current security control implementations
            """
        else:
            # Generate dynamic summary based on findings
            priority_text = ""
            if critical_high_count > 0:
                priority_text = f"""
                <b>Immediate Action Required:</b>
                This assessment identified {critical_high_count} high-priority security vulnerabilities 
                that require immediate remediation. These findings pose significant risk to the 
                confidentiality, integrity, and availability of the assessed systems.
                """
            
            findings_breakdown = []
            for severity in ['critical', 'high', 'medium', 'low', 'info']:
                count = self.summary_stats[severity]
                if count > 0:
                    findings_breakdown.append(f"• {severity.title()}: {count} finding{'s' if count != 1 else ''}")
            
            summary = f"""
            Cybrty Security Services conducted a comprehensive Vulnerability Assessment and 
            Penetration Testing (VAPT) engagement against {self.target} during 
            {self.report_date.strftime('%B %Y')}.
            
            <b>Assessment Overview:</b>
            This security assessment identified {total_findings} security finding{'s' if total_findings != 1 else ''} 
            requiring attention across various severity levels. The evaluation encompassed automated 
            vulnerability scanning, manual penetration testing, and security configuration reviews.
            
            {priority_text}
            
            <b>Findings Summary:</b>
            {chr(10).join(findings_breakdown)}
            
            <b>Overall Risk Assessment:</b>
            • Risk Rating: {self.risk_rating}
            • Risk Score: {self.overall_risk_score:.1f}/10.0
            • Total Security Findings: {total_findings}
            
            <b>Business Impact:</b>
            The identified vulnerabilities present varying levels of risk to business operations. 
            Critical and high-severity findings could potentially lead to data breaches, service 
            disruptions, or unauthorized system access if left unaddressed.
            
            <b>Strategic Recommendations:</b>
            • Prioritize remediation of critical and high-severity vulnerabilities
            • Implement defense-in-depth security controls
            • Establish continuous security monitoring capabilities
            • Develop incident response and recovery procedures
            """
        
        return summary
    
    def add_ai_insights(self) -> None:
        """Add AI-generated insights to the report."""
        logger.info("Generating AI insights for VAPT report")
        
        # This would integrate with CrewAI for advanced analysis
        # For now, we'll add some intelligent analysis based on findings
        
        # Calculate vulnerability trends
        web_vulns = len([f for f in self.findings if 'web' in f.get('title', '').lower() or 'http' in f.get('title', '').lower()])
        network_vulns = len([f for f in self.findings if 'network' in f.get('title', '').lower() or 'port' in f.get('title', '').lower()])
        
        insights = {
            'vulnerability_categories': {
                'web_application': web_vulns,
                'network_infrastructure': network_vulns,
                'other': len(self.findings) - web_vulns - network_vulns
            },
            'risk_distribution': dict(self.summary_stats),
            'remediation_timeline': self._calculate_remediation_timeline()
        }
        
        # Store insights for use in report sections
        self.ai_insights = insights
        logger.info(f"Generated AI insights: {insights}")
    
    def _calculate_remediation_timeline(self) -> Dict[str, int]:
        """Calculate recommended remediation timeline in days."""
        return {
            'immediate': self.summary_stats['critical'],  # 0-1 days
            'urgent': self.summary_stats['high'],         # 1-7 days
            'moderate': self.summary_stats['medium'],     # 7-30 days
            'planned': self.summary_stats['low'] + self.summary_stats['info']  # 30+ days
        }
    
    def generate_complete_report(self, opensearch_results: Optional[List[Dict[str, Any]]] = None) -> str:
        """
        Generate a complete VAPT report with all sections.
        
        Args:
            opensearch_results: Optional list of findings from OpenSearch
            
        Returns:
            Path to the generated PDF report
        """
        logger.info(f"Starting complete VAPT report generation for {self.target}")
        
        try:
            # Add findings from OpenSearch if provided
            if opensearch_results:
                logger.info(f"Adding {len(opensearch_results)} findings from OpenSearch")
                self.add_findings_from_opensearch(opensearch_results)
            
            # Generate AI insights
            self.add_ai_insights()
            
            # Calculate overall risk assessment
            self.calculate_overall_risk()
            
            # Generate the report
            report_path = self.generate_report()
            
            logger.info(f"Successfully generated VAPT report at: {report_path}")
            return report_path
            
        except Exception as e:
            logger.error(f"Error generating VAPT report: {str(e)}")
            raise
    
    def _create_executive_summary(self) -> List[Any]:
        """Create an enhanced executive summary with AI insights."""
        from reportlab.platypus import Paragraph, Spacer
        
        story = []
        
        story.append(Paragraph("EXECUTIVE SUMMARY", self.styles['SectionHeader']))
        
        # Use AI-generated summary
        summary_text = self.generate_executive_summary_ai()
        story.append(Paragraph(summary_text, self.styles['BodyText']))
        
        # Add risk assessment table
        story.append(Spacer(1, 20))
        story.append(Paragraph("Risk Assessment Summary", self.styles['SubsectionHeader']))
        
        risk_data = [
            ['Metric', 'Value', 'Rating'],
            ['Overall Risk Score', f"{self.overall_risk_score:.1f}/10.0", self.risk_rating],
            ['Total Findings', str(sum(self.summary_stats.values())), 'Various'],
            ['Critical/High Priority', str(self.summary_stats['critical'] + self.summary_stats['high']), 'Immediate Action'],
            ['Assessment Date', self.report_date.strftime('%B %d, %Y'), 'Current']
        ]
        
        from reportlab.platypus import Table
        risk_table = Table(risk_data, colWidths=[2*self.margin, 1.5*self.margin, 1.5*self.margin])
        risk_table.setStyle(self.create_table_style())
        story.append(risk_table)
        
        return story
    
    def get_report_metadata(self) -> Dict[str, Any]:
        """
        Get comprehensive metadata about the generated report.
        
        Returns:
            Dictionary containing report metadata
        """
        return {
            'run_id': self.run_id,
            'target': self.target,
            'report_date': self.report_date.isoformat(),
            'total_findings': sum(self.summary_stats.values()),
            'severity_breakdown': dict(self.summary_stats),
            'overall_risk_score': self.overall_risk_score,
            'risk_rating': self.risk_rating,
            'filename': self.get_filename(),
            'output_path': str(self.get_output_path()),
            'assessment_scope': self.assessment_scope,
            'methodology': self.methodology,
            'engagement_type': self.engagement_type
        }
